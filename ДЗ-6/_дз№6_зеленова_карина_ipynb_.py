# -*- coding: utf-8 -*-
""""ДЗ№6_Зеленова_Карина.ipynb"

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P_vY731qBhnmJQjGX7B1R6yHy3y3Q5a0
"""

import pandas as pd
import os
from IPython.display import display
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import io
from scipy import stats
import seaborn as sns



# from google.colab import files


# uploaded = files.upload()


# df = pd.read_csv(io.BytesIO(uploaded['yandex_music_project.csv']))
#https://drive.google.com/file/d/11qVmgAV4ScMhUJqUp4MMrwycztljNdNn/view?usp=sharing

url = 'https://drive.google.com/file/d/11qVmgAV4ScMhUJqUp4MMrwycztljNdNn/view?usp=sharing'
path = 'https://drive.google.com/uc?export=download&id=' + url.split('/')[-2]
df = pd.read_csv(path)
df

"""Survived выжил (1-да, 0- нет)

Pclass Класс круиза

Name ФИО

Sex Пол

Age Возраст

SibSp число братьев, сестер или супругов на борту у человека

Parch количество родителей или детей, с которыми путешествовал каждый пассажир

Ticket Номер билета

Fare Цена билета

Cabin Номер каюты

Embarked Порт посадки
"""

# Вычисление корреляции между признаками
corr = df.corr()

# Отображение корреляции между признаком Survived и другими признаками
print(corr['Survived'].sort_values(ascending=False))

# Группировка данных по возрастным интервалам
age_bins = [0, 10, 20, 30, 40, 50, 60, 70, 80]
df['age_group'] = pd.cut(df['Age'], bins=age_bins)

# Подсчет количества выживших и умерших в каждом интервале
survived_counts = df[df['Survived'] == 1]['age_group'].value_counts()
dead_counts = df[df['Survived'] == 0]['age_group'].value_counts()


# Создание столбчатой диаграммы
fig, ax = plt.subplots()
x = np.arange(len(age_bins) - 1)
width = 0.35
ax.set_title('Выживаемость по возрастным группам')
ax.bar(x - width/2, survived_counts.values, width, label='Выжил', color='blue')
ax.bar(x + width/2, dead_counts.values, width, label='Умер', color='gray')
ax.set_xticks(x)
ax.set_xticklabels(survived_counts.index.astype(str))
ax.set_xlabel('Возврастная група')
ax.set_ylabel('Количество')
ax.legend()
plt.show()

sns.heatmap(corr, cmap="Spectral", annot = True, fmt='.1g', linewidths=1, linecolor='gray')

"""На тепловой карте корреляция принимает наиболььшие значения между столбцами Pclass(Класс круиза) и Fare (Цена билета), а  так же  между SibSp (число братьев, сестер или супругов на борту у человека) и Parch (количество родителей или детей, с которыми путешествовал каждый пассажир)



"""